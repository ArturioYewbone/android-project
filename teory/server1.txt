#include <iostream>
#include <cstring>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <chrono>
#include <iomanip>
#include <nlohmann/json.hpp>
#include "libpq-fe.h"
#include <filesystem>
#include <fstream>
#include <atomic>
#include <csignal>
//g++ -std=c++11 -g -Wall -I/usr/local/include/pgsql -I/home/mpi/pin2106/SorokinEvgeny/libs -o server3 server3.cpp -lpq -lcurl

using json = nlohmann::json;
#define PORT 44021
std::atomic<bool> keepRunning{true};
// Сигнальный обработчик для SIGINT
void handleSigint(int) {
    keepRunning = false;
}

// Функция для получения текущего времени в формате HH:MM:SS
std::string getCurrentTime() {
    auto now = std::chrono::system_clock::now();
    auto now_time_t = std::chrono::system_clock::to_time_t(now);
    std::tm tm = *std::localtime(&now_time_t);

    std::ostringstream oss;
    oss << std::put_time(&tm, "%H:%M:%S");
    return oss.str();
}
// Читает ровно count байт из sock в buf или бросает исключение
void readFully(int sock, void* buf, size_t count){
char* ptr = static_cast<char*>(buf);
    size_t remaining = count;
    while (remaining > 0) {
if (!keepRunning) {
            std::cout << "Interrupted by SIGINT, aborting readFully\n";
            throw std::runtime_error("Interrupted by SIGINT");
        }
        ssize_t r = read(sock, ptr, remaining);
        if (r < 0) {
            if (errno == EINTR) {
                // если это прерывание по сигналу и мы уже получили SIGINT
                if (!keepRunning) {
                    std::cout << "Interrupted by SIGINT during read, aborting\n";
                    throw std::runtime_error("Interrupted by SIGINT");
                }
                // иначе просто повторяем чтение
                continue;
            }
            throw std::runtime_error(std::string("Ошибка чтения из сокета: ") + std::strerror(errno));
        }
        if (r == 0) {
            throw std::runtime_error("Клиент закрыл соединение досрочно");
        }
        ptr += r;
        remaining -= r;
    }
}

// Метод для выполнения SQL-запроса и получения результатов
json executeSQLQuery(const std::string& query, bool isLogin, const std::string& typeSQL) {
    PGconn *conn = PQconnectdb("user=mpi password=135a1 host=povt-cluster.tstu.tver.ru port=5432 dbname=p21_06_iss");
    if (PQstatus(conn) != CONNECTION_OK) {
        std::cerr << "Ошибка подключения к базе данных: " << PQerrorMessage(conn) << std::endl;
        PQfinish(conn);
        return {{"typeSQL", typeSQL}, {"status", "error"}, {"message", "Ошибка подключения к базе данных"}};
    }

    json result_json;

    if (isLogin) {
        // Разделение запроса на логин и пароль
        size_t delimiter_pos = query.find(" ");
        if (delimiter_pos == std::string::npos) {
            result_json["typeSQL"] = typeSQL;
            result_json["status"] = "error";
            result_json["message"] = "Неверный формат запроса. Требуется логин и пароль.";
            PQfinish(conn);
            return result_json;
        }

        std::string login = query.substr(0, delimiter_pos);
        std::string password = query.substr(delimiter_pos + 1);
        std::cout << "login:" << login << " pas:" << password <<"\n";
        login = PQescapeLiteral(conn, login.c_str(), login.length());
        password = PQescapeLiteral(conn, password.c_str(), password.length());
        // Формируем запрос для поиска логина
        std::string login_query = "SELECT pass FROM myusers WHERE login = " + login;

        PGresult *res = PQexec(conn, login_query.c_str());

        if (PQresultStatus(res) != PGRES_TUPLES_OK) {
            std::cerr << "Ошибка выполнения SQL-запроса: " << PQerrorMessage(conn) << std::endl;
            PQclear(res);
            PQfinish(conn);
            return {{"status", "error"}, {"message", "Ошибка выполнения запроса логина"}};
        }

        int rows = PQntuples(res);

        if (rows == 0) {
            // Логин не найден
            result_json["typeSQL"] = typeSQL;
            result_json["status"] = "error";
            result_json["message"] = "Логин не найден";
        } else if (rows == 1) {
            // Логин найден, проверяем пароль
            std::string stored_password = PQgetvalue(res, 0, 0);  // Пароль из базы данных
        //     std::cout << "stored_password: [" << stored_password << "] (length: " << stored_password.length() << ") "
        //   << "password: [" << password << "] (length: " << password.length() << ")\n";

            if ("'"+ stored_password +"'" == password) {
                result_json["typeSQL"] = typeSQL;
                result_json["status"] = "success";
                result_json["message"] = "Пароль верный";
            } else {
                result_json["typeSQL"] = typeSQL;
                result_json["status"] = "error";
                result_json["message"] = "Неверный пароль";
            }
        } else {
            result_json["typeSQL"] = typeSQL;
            result_json["status"] = "error";
            result_json["message"] = "Ошибка: найдено более одного пользователя с таким логином";
        }

        PQclear(res);
    } else {
        // Выполнение обычного SQL-запроса
        PGresult *res = PQexec(conn, query.c_str());

        if (PQresultStatus(res) != PGRES_TUPLES_OK && PQresultStatus(res) != PGRES_COMMAND_OK) {
            std::string error_msg = PQerrorMessage(conn);
            std::cerr << "Ошибка выполнения SQL-запроса: " << error_msg << std::endl;
            PQclear(res);
            PQfinish(conn);
            if (error_msg.find("duplicate key value violates unique constraint") != std::string::npos) {
                return {{"typeSQL", typeSQL}, {"status", "error"}, {"message", "This login is already occupied"}};
            }
            return {{"typeSQL", typeSQL}, {"status", "error"}, {"message", error_msg}};
        }
        // Получаем статус выполненной команды
        std::string command_tag = PQcmdStatus(res);
        // Если это INSERT, UPDATE или DELETE, подтверждаем успешное выполнение и завершаем функцию
        if (command_tag.find("INSERT") != std::string::npos || 
            command_tag.find("UPDATE") != std::string::npos || 
            command_tag.find("DELETE") != std::string::npos) {
            
            std::cout << "SQL выполнен успешно: " << command_tag << std::endl;
            
            PQclear(res);
            return {{"status", "success"}, {"message", "SQL query executed successfully"}, {"command", command_tag}};
        }
        int rows = PQntuples(res);
        int cols = PQnfields(res);
        
        json data_json;
        for (int i = 0; i < rows; ++i) {
            json row_json;
            for (int j = 0; j < cols; ++j) {
                row_json[std::string(PQfname(res, j))] = PQgetvalue(res, i, j);
            }
            data_json.push_back(row_json);
        }
        result_json["typeSQL"] = typeSQL;
        result_json["status"] = "success";
        result_json["data"] = data_json;

        PQclear(res);
    }

    PQfinish(conn);
    return result_json;
}


int main() {
std::signal(SIGPIPE, SIG_IGN);
std::signal(SIGINT, handleSigint);
    int server_fd, new_sock;
    struct sockaddr_in address;
    char buffer[1024] = {0};

    // Создание сокета
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Создание сокета не удалось");
        return -1;
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;  // Локальный адрес
    address.sin_port = htons(PORT);        // Порт 8080

    // Привязка сокета к адресу и порту
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("Ошибка привязки");
        return -1;
    }

    // Ожидание подключений
    if (listen(server_fd, 3) < 0) {
        perror("Ошибка при прослушивании порта");
        return -1;
    }

    std::cout << "Ожидание подключения клиента...\n";

    // Бесконечный цикл для работы с клиентами
    while (keepRunning) {
        // Принимаем подключение от клиента
        if ((new_sock = accept(server_fd, NULL, NULL)) < 0) {
	    if (errno == EINTR && !keepRunning) break;
	    perror("Ошибка при принятии подключения");
            continue; // Если не удалось принять подключение, пробуем снова
        }

        std::cout << "[" << getCurrentTime() << "] Клиент подключен.\n";

        // Чтение данных от клиента
        int valread;
       try {
		while(keepRunning){
    // 1) читаем 4 байта — длину JSON-заголовка
    uint32_t netHeaderLen;
    readFully(new_sock, &netHeaderLen, sizeof(netHeaderLen));
    uint32_t headerLen = ntohl(netHeaderLen);

    // 2) читаем ровно headerLen байт JSON
    std::vector<char> headerBuf(headerLen);
    readFully(new_sock, headerBuf.data(), headerLen);

std::string hdrStr(headerBuf.begin(), headerBuf.end());
    std::cout << "[" << getCurrentTime() << "] Raw JSON header: "
              << hdrStr << "\n";    
auto received_json = nlohmann::json::parse(hdrStr);

    std::string command_type = received_json["type"];
    json response_json;
    if (command_type == "upload_avatar") {
        // 3) из JSON берём user_id и размер картинки
        int userId    = received_json["user_id"];
        int photoSize = received_json["size"];

        // 4) читаем ровно photoSize байт «сырых» данных
        std::vector<unsigned char> img_data(photoSize);
        readFully(new_sock, img_data.data(), photoSize);

        // 5) сохраняем в папку ./photos/{userId}.jpg
        std::filesystem::create_directories("photos");
        std::filesystem::path filePath = std::filesystem::path("photos")
                                        / (std::to_string(userId) + ".jpg");
        std::ofstream ofs(filePath, std::ios::binary);
        if (!ofs) throw std::runtime_error("Не удалось открыть файл для записи");
        ofs.write(reinterpret_cast<char*>(img_data.data()), photoSize);
        ofs.close();

        // 6) отвечаем клиенту JSON-ответом
        json resp = {
            {"status", "ok"},
            {"path", filePath.string()}
        };
        auto s = resp.dump();
        uint32_t n = htonl(s.size());
        // шлём длину + тело
        send(new_sock, &n, sizeof(n), 0);
        send(new_sock, s.data(), s.size(), 0);
    }else if (command_type == "download_avatar") {
    int userId = received_json["user_id"];
    // путь к файлу
    auto path = std::filesystem::path("photos") /
                (std::to_string(userId) + ".jpg");
    // читаем файл целиком
    std::ifstream ifs(path, std::ios::binary | std::ios::ate);
    if (!ifs) {
        response_json = {
            {"status", "error"},
            {"message", "File not found"}
        };
    } else {
        auto size = ifs.tellg();
        ifs.seekg(0);
        std::vector<unsigned char> buf(size);
        ifs.read(reinterpret_cast<char*>(buf.data()), size);

        // 1) сначала отправляем JSON-заголовок со size
        response_json = {
            {"status", "ok"},
            {"size", (int)size}
        };
        std::string hdr = response_json.dump();
        uint32_t n = htonl(hdr.size());
        send(new_sock, &n, sizeof(n), 0);
        send(new_sock, hdr.data(), hdr.size(), 0);

        // 2) а потом сами байты
        send(new_sock, buf.data(), size, 0);
        // перейдём к следующему client.read в цикле
        continue;
    }
}
    else {
std::string typeSql = received_json.value("typeSql", "");
            std::string command = received_json.value("command", "");

            if (command_type == "sql" || command_type == "sql_login") {
                bool isLogin = (command_type == "sql_login");
                response_json = executeSQLQuery(command, isLogin, typeSql);
            } else {
                response_json = {
                    {"status", "received"},
                    {"command_type", command_type},
                    {"command", command}
                };
            }
        }

        // 7) шлём ответ в том же формате: [4-байта длины][JSON UTF-8]
        std::string respStr = response_json.dump();
std::cout << "[" << getCurrentTime() << "] Sending response JSON: "
                      << respStr << std::endl;
        uint32_t netRespLen = htonl(static_cast<uint32_t>(respStr.size()));
        send(new_sock, &netRespLen, sizeof(netRespLen), 0);
        send(new_sock, respStr.data(), respStr.size(), 0);
        // … обработка других типов команд …
    }
}
catch (const std::exception& ex) {
    json err = {{"status","error"},{"message",ex.what()}};
    auto s = err.dump();
    uint32_t n = htonl(s.size());
    send(new_sock, &n, sizeof(n), 0);
    send(new_sock, s.data(), s.size(), 0);
}

       
            std::cout << "[" << getCurrentTime() << "] Клиент отключился.\n\n";
        

        // Закрытие соединения с клиентом
        close(new_sock);
        std::cout << "[" << getCurrentTime() << "] Ожидание нового подключения...\n";
    }

    // Закрытие серверного сокета (это не будет выполнено, т.к. сервер в бесконечном цикле)
    close(server_fd);

    return 0;
}
